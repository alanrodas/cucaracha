
==================== FINAL INTERFACE ====================
2016-09-11 04:29:33.798793 UTC

interface main@main:Main 7103
  interface hash: 16b58a3ad38c053a260c8a6169af11b4
  ABI hash: 7869877c62b31ec70c273d69fd7bd46a
  export-list hash: 73cc21d643a4717e1e7c48fd94be3eb1
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8e68af8b00fdf7aa8a0d2609f882db37
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0 cucaracha-0.1.0.0@cucar_FplgUcjuVAy8HMM9qW2uWS
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.Environment ba6e36000c8274703cf7786fbe8d0f6c
import  -/  base-4.8.2.0:System.IO 0899686bfc1d9ef72dff3de85e99862a
import  -/  cucaracha-0.1.0.0@cucar_FplgUcjuVAy8HMM9qW2uWS:Lexer c0c76bdef4f5ea74fc075c03aa27f4a0
import  -/  cucaracha-0.1.0.0@cucar_FplgUcjuVAy8HMM9qW2uWS:Parser afdce5f6155e14de618d453520e71be0
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
0ae7337943259391c10a8250d9ca9102
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
07fb280dcfbc17c5d5f8d7704c5f89ac
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case System.Environment.getArgs1 s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.FD.openFile1
                        (GHC.List.head @ GHC.Base.String ipv1)
                        GHC.IO.IOMode.ReadMode
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (Parser.$fShowProgramT_$cshowsPrec
                      GHC.Show.shows18
                      (Parser.happyNewToken
                         0
                         (Parser.notHappyAtAll @ Parser.Happy_IntList)
                         (Parser.notHappyAtAll
                            @ (Parser.HappyStk
                                 (Parser.HappyAbsSyn
                                    Parser.ProgramT
                                    [Parser.FunctionT]
                                    Parser.FunctionT
                                    [Parser.ParameterT]
                                    [Parser.ParameterT]
                                    Parser.ParameterT
                                    Parser.BlockT
                                    [Parser.StmtT]
                                    Parser.StmtT
                                    [Parser.ExprT]
                                    Parser.ExprT
                                    Parser.ExprT
                                    Parser.ExprT
                                    Parser.ExprT
                                    Parser.ExprT
                                    Parser.ExprT
                                    Parser.ExprT
                                    Parser.Type
                                    Parser.ExprT
                                    Parser.ExprT
                                    Parser.ExprT
                                    Parser.ExprT
                                    Parser.ExprT
                                    Parser.StmtT
                                    Parser.StmtT
                                    Parser.ExprT
                                    GHC.Base.String)))
                         (Lexer.alexScanTokens ipv5))
                        `cast`
                      (Parser.NTCo:HappyIdentity[0]
                           (UnivCo mkUnsafeCo representational (Parser.HappyAbsSyn
                                                                  Parser.ProgramT
                                                                  [Parser.FunctionT]
                                                                  Parser.FunctionT
                                                                  [Parser.ParameterT]
                                                                  [Parser.ParameterT]
                                                                  Parser.ParameterT
                                                                  Parser.BlockT
                                                                  [Parser.StmtT]
                                                                  Parser.StmtT
                                                                  [Parser.ExprT]
                                                                  Parser.ExprT
                                                                  Parser.ExprT
                                                                  Parser.ExprT
                                                                  Parser.ExprT
                                                                  Parser.ExprT
                                                                  Parser.ExprT
                                                                  Parser.ExprT
                                                                  Parser.Type
                                                                  Parser.ExprT
                                                                  Parser.ExprT
                                                                  Parser.ExprT
                                                                  Parser.ExprT
                                                                  Parser.ExprT
                                                                  Parser.StmtT
                                                                  Parser.StmtT
                                                                  Parser.ExprT
                                                                  GHC.Base.String) Parser.ProgramT))
                      (GHC.Types.[] @ GHC.Types.Char))
                   GHC.Types.True
                   ipv4 } } }) -}
57333ea9e3d19d235e5f0079d3f26229
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

